// sassbox 0.1.0 
// https://github.com/ala-ch/Sassbox.git
// (c) 2015, 2015 ala pixel LLC <http://ala.ch>
// GPL-3.0
// 06.10.2015 19:39

// _helpers.scss
//
// Generic helpers and tools such as converters, calculaters etc.
// IMPORTANT: Do not output any CSS in this file


// --- Converters and Calculators

/// Default font size in pixel (browser context)
$default-base-font-size: 16px !default;

/// Convert pixel -> em
///
/// @param {length} $val - a font size in px
/// @param {length} $base [$default-base-font-size] - the base font size (browser context) 
///
/// @see {variable} $default-base-font-size
@function px2em($val, $base: $default-base-font-size)
{
  @return ($val / $base) * 1em;
}


// --- CSS3/Prefixing

/// The default prefixes to return 
///
/// @see {mixin} prefix
$default-prefixes: ('webkit', 'moz', 'ms', 'o');

/// Returns the prefixed declarations for a given property and value. Pass a list of 
/// prefixes with argument $prefixes to fine-tune the returned declarations. Beside the 
/// prefixed properties the mixin will always return the un-prefixed declaration.
///
/// @see {variable} $default-prefixes
@mixin prefix($property, $value, $prefixes: $default-prefixes)
{
  @each $prefix in $prefixes {
    -#{$prefix}-#{$property}: $value;
  }
  #{$property}: $value;
}


// --- Layout macros

/// Removes the browser-default button styles from button elements. 
@mixin un-button {
    border: 0;
    outline: none;
    @include prefix(appearance, none, ('webkit', 'moz'));
}

/// Hides the overlay of an element and offsets it's content. 
///
/// Same as Compass {mixin} `replace-text` but without adding a background image.
/// Comes in handy when dealing with a group of buttons with same style but different
/// background images.
@mixin offset-text {
  text-indent: -119988px;
  overflow: hidden;
  text-align: left;
  text-transform: capitalize;
}

// _images.scss
//
// Generic helpers and tools for dealing with images and background-images
// IMPORTANT: Do not output any CSS in this file


// --- SVG Fallback

/// Default fallback type (suffix without leading dot). 
///
/// @see {mixin} svg-fallback
$default-svg-fallback: 'png' !default;

/// Default fallback background size. 
///
/// @see {mixin} svg-fallback
$default-svg-size: inherit inherit !default;

/// Default position for background-image added with mixin svg-fallback. 
///
/// @see {mixin} svg-fallback
$default-svg-bg-position: 50% 50% !default;

/// Default background-repeat for background-image added with mixin svg-fallback. 
///
/// @see {mixin} svg-fallback
$default-svg-repeat: no-repeat !default;

/// Returns declarations for a SVG background image with fallback.
///
/// @param {string} $svg - path and name of the image without suffix, ie '/images/logo'
/// @param {string} $fb [png] - type of the fallback
/// @param {string} $size [inherit inherit] - background-size
/// @param {string} $position [50% 50%] - background-position
/// @param {string} $repeat [no-repeat] - background-repeat
///
/// @see {variable} $default-svg-fallback
/// @see {variable} $default-svg-size
/// @see {variable} $default-svg-bg-position
/// @see {variable} $default-svg-repeat
@mixin svg-fallback(
  $svg,
  $fb: $default-svg-fallback,
  $size: $default-svg-size,
  $position: $default-svg-bg-position,
  $repeat: $default-svg-repeat
) {
  background-image: url('#{$svg}.#{$fb}');
  background-image: url('#{$svg}.svg');
  background-size: $size;
  background-position: $position;
  background-repeat: $repeat;
}

// _responsive-typography.scss
//
// Makes it simple to deal with responsive typography. 
// IMPORTANT: Do not output any CSS in this file


/// Default breakpoints for responsive typography. 
/// Typically you just override this with your RWD breakpoint list. 

$type-breakpoints: () !default;

/// Default font-set (ie. 'sans', 'fontname'). Can be any of the keys you use in your 
/// `$font-sizes` and `$font-scale-map`. Often you're good to go with just one font-set 
/// (ie. 'default'). Sometimes you need different font sizes (or other typographic 
/// settings for different fonts used in the design. That's when to work with different
/// font-sets (ie. ('sans', 'serif') or ('helvetica', 'georgia'). 

$default-font-set: 'default' !default;


/// Default font scale used in mixin font-size
///
/// @see font-size

$default-font-scale: 'default' !default;


/// Font sizes and line heights mapped by sets and scales.
/// *NOTE:* Keys must be valid CSS properties, values must be valid CSS values.
///
/// @see {variable} $default-font-set
/// @example -> /demo

$font-sizes: (
  'default': (
    'default': (
      'font-size': px2em(16, 16),
      'line-height': px2em(22, 16),
    ),
  ),
) !default;


/// Translation map for responsive font sizes mapped by sets, scales and breakpoints. 
///
/// This map declares what font scales to apply for a given font scale at a given 
/// breakpoint. Remember to add a scale named 'default' for every set. It is used if 
/// none of the media queries matches (mobile first). 
///
/// @example -> /demo

$font-scale-map: (
  'default': (
    'default': (
      'default': 'default',
    ),
  ),
) !default;


/// Returns the font-scale keyword for a given font-scale (in layout) and breakpoint.
///
/// @param {string} $scale - any of the keys in $font-scale-map
/// @param {sting} $bp - any of the breakpoints declared in $font-scale-map
/// @param {string} $font-set [$default-font-set] - any of the font-sets declared in $font-scale-map
///
/// @see {variable} $default-font-set
/// @see {mixin} font-size

@function font-scale($scale, $bp, $font-set: $default-font-set)
{
  @if map-has-key($font-scale-map, $font-set) {
    @if map-has-key(map-get($font-scale-map, $font-set), $scale) {
      @if map-has-key(map-get(map-get($font-scale-map, $font-set), $scale), $bp) {
        @return map-get(map-get(map-get($font-scale-map, $font-set), $scale), $bp);
      } @else {
        @warn 'breakpoint #{$bp} not found in $font-scale-map.#{$font-set}.#{$scale}.'
      }
    } @else {
      @warn 'font-scale #{$scale} not found in $font-scale-map.#{$font-set}.';
    }
  } @else {
    @warn 'font-set #{$font-set} not found in $font-scale-map';
  }
}


/// Returns the adequate CSS properties defined in `$font-sizes` for a given font-scale 
/// and a given breakpoint. Typically you should use the mixin `font-size` in your 
/// stylesheet (returns media queries for all defined breakpoints). 
///
/// @param {string} $scale - any of the keys in $font-scale-map
/// @param {string} $bp - any of the breakpoints declared in $font-scale-map
/// @param {string} $font-set [$default-font-set] - anyo of the font-sets declared in $font-scale-map
///
/// @see {variable} $default-font-set
/// @see {mixin} font-size

@mixin font-declarations($scale, $bp, $font-set: $default-font-set)
{
  @each $property, $value in map-get(map-get($font-sizes, $font-set), font-scale($scale, $bp, $font-set)) {
    #{$property}: #{$value};
  }
}


/// Mixin to set the adequate (responsive) font size.
///
/// When requesting a font size, pass the mixin the prefix of the font size used in the
/// original layout. The mixin will then return an adequate font size for the current
/// viewport.
///
/// NOTE: As Sass does not support mixin interpolation yet your breakpoint mixin must
/// use the name 'mq'. s. https://github.com/sass/sass/issues/626
/// If your breakpoint mixin uses another name: 
/// a) rename it
/// c) write your own implementation of this font-size mixin
///
/// @param {string} $scale - any of the keys in $font-scale-map
/// @param {string} $font-set [$default-font-set] - any of the font-sets declared in $font-scale-map

@mixin font-size($scale: $default-font-scale, $font-set: $default-font-set)
{
  // default size (mobile first)
  @include font-declarations($scale, 'default', $font-set);
  // NOTE: requires breakpoints to be ordered ASC (mobile first)
  @each $name, $size in $type-breakpoints {
    @include mq(#{$name}) {
      @include font-declarations($scale, #{$name}, $font-set);
    }
  }
}

// _typography.scss
//
// useful Sass snippets when dealing with type
// IMPORTANT: Do not output any CSS in this file


/// Default value used in mixin `font-smoothing`
///
/// @see {mixin} font-smoothing

$default-font-smoothing: 'sharp' !default; 


/// Mixin to set font-smoothing for optimized font rendering on OS X. 
///
/// **NOTE:** font-smoothing is non-standard and is not on a standards track.
///
/// Defaults to 'sharp' font rendering. Override `$default-font-smoothing`
/// to change the default value.
///
/// - `sharp` triggers font-smoothing `antialiased` (-webkit) or `grayscale` (-moz) which often looks better for bright text on dark backgrounds. 
/// - `none` results in pixelated text (-webkit only)
/// - `strong` represents subpixel-antialiased rendering (browser default)
///
/// @param {string} $font-smoothing [sharp] - `sharp|none|strong`
///
/// @see {variable} $default-font-smoothing
///
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/font-smooth
/// @link http://maxvoltar.com/sandbox/fontsmoothing/
/// @link http://typerendering.com/
///
/// @author Thanks [Maximilian Hoffmann](https://maximilianhoffmann.com/posts/better-font-rendering-on-osx)

@mixin font-smoothing($font-smoothing: $default-font-smoothing)
{
  @if $font-smoothing == 'sharp' {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  } @else if $font-smoothing == 'none' {
    -webkit-font-smoothing: none;
  } @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
}

// _responsive-typography.scss
//
// Makes it simple to deal with responsive typography. 
// IMPORTANT: Do not output any CSS in this file


/// Default breakpoints for responsive typography. 
/// Typically you just override this with your RWD breakpoint list. 

$sb-type-breakpoints: () !default;

/// Default font-set (ie. 'sans', 'fontname'). Can be any of the keys you use in your 
/// `$sb-font-sizes` and `$sb-font-scale-map`. Often you're good to go with just one font-set 
/// (ie. 'default'). Sometimes you need different font sizes (or other typographic 
/// settings for different fonts used in the design. That's when to work with different
/// font-sets (ie. ('sans', 'serif') or ('helvetica', 'georgia'). 

$sb-default-font-set: 'default' !default;


/// Default font scale used in mixin font-size
///
/// @see sb-font-size

$sb-default-font-scale: 'default' !default;


/// Font sizes and line heights mapped by sets and scales.
/// *NOTE:* Keys must be valid CSS properties, values must be valid CSS values.
///
/// @see {variable} $sb-default-font-set
/// @example -> /demo

$sb-font-sizes: (
  'default': (
    'default': (
      'font-size': px2em(16, 16),
      'line-height': px2em(22, 16),
    ),
  ),
) !default;


/// Translation map for responsive font sizes mapped by sets, scales and breakpoints. 
///
/// This map declares what font scales to apply for a given font scale at a given 
/// breakpoint. Remember to add a scale named 'default' for every set. It is used if 
/// none of the media queries matches (mobile first). 
///
/// @example -> /demo

$sb-font-scale-map: (
  'default': (
    'default': (
      'default': 'default',
    ),
  ),
) !default;


/// Returns the font-scale keyword for a given font-scale (in layout) and breakpoint.
///
/// @param {string} $scale - any of the keys in $sb-font-scale-map
/// @param {sting} $bp - any of the breakpoints declared in $sb-font-scale-map
/// @param {string} $font-set [$sb-default-font-set] - any of the font-sets declared in $sb-font-scale-map
///
/// @see {variable} $sb-default-font-set
/// @see {mixin} sb-font-size

@function sb-font-scale($scale, $bp, $font-set: $sb-default-font-set)
{
  @if map-has-key($sb-font-scale-map, $font-set) {
    @if map-has-key(map-get($sb-font-scale-map, $font-set), $scale) {
      @if map-has-key(map-get(map-get($sb-font-scale-map, $font-set), $scale), $bp) {
        @return map-get(map-get(map-get($sb-font-scale-map, $font-set), $scale), $bp);
      } @else {
        @warn 'breakpoint #{$bp} not found in $sb-font-scale-map.#{$font-set}.#{$scale}.'
      }
    } @else {
      @warn 'font-scale #{$scale} not found in $sb-font-scale-map.#{$font-set}.';
    }
  } @else {
    @warn 'font-set #{$font-set} not found in $sb-font-scale-map';
  }
}


/// Returns the adequate CSS properties defined in `$sb-font-sizes` for a given font-scale 
/// and a given breakpoint. Typically you should use the mixin `font-size` in your 
/// stylesheet (returns media queries for all defined breakpoints). 
///
/// @param {string} $scale - any of the keys in $sb-font-scale-map
/// @param {string} $bp - any of the breakpoints declared in $sb-font-scale-map
/// @param {string} $font-set [$sb-default-font-set] - anyo of the font-sets declared in $sb-font-scale-map
///
/// @see {variable} $sb-default-font-set
/// @see {mixin} sb-font-size

@mixin sb-font-declarations($scale, $bp, $font-set: $sb-default-font-set)
{
  @each $property, $value in map-get(map-get($sb-font-sizes, $font-set), sb-font-scale($scale, $bp, $font-set)) {
    #{$property}: #{$value};
  }
}


/// Mixin to set the adequate (responsive) font size.
///
/// When requesting a font size, pass the mixin the prefix of the font size used in the
/// original layout. The mixin will then return an adequate font size for the current
/// viewport.
///
/// NOTE: As Sass does not support mixin interpolation yet your breakpoint mixin must
/// use the name 'mq'. s. https://github.com/sass/sass/issues/626
/// If your breakpoint mixin uses another name: 
/// a) rename it
/// c) write your own implementation of this font-size mixin
///
/// @param {string} $scale - any of the keys in $sb-font-scale-map
/// @param {string} $font-set [$sb-default-font-set] - any of the font-sets declared in $sb-font-scale-map

@mixin sb-font-size($scale: $sb-default-font-scale, $font-set: $sb-default-font-set)
{
  // default size (mobile first)
  @include sb-font-declarations($scale, 'default', $font-set);
  // NOTE: requires breakpoints to be ordered ASC (mobile first)
  @each $name, $size in $sb-type-breakpoints {
    @include mq(#{$name}) {
      @include sb-font-declarations($scale, #{$name}, $font-set);
    }
  }
}
